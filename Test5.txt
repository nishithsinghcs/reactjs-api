To log all method calls during an API request in a single line, we can make use of Spring AOP (Aspect-Oriented Programming) along with a custom logger configuration. The idea is to create a single log entry per API request that captures the invocation of all methods within that request. This can be done by tracking each method call within an API request and then logging all collected data once the request has been fully processed.

Here’s a step-by-step guide on how to implement this:

1. Create an Aspect for Logging

The aspect will intercept all method calls within controllers and services and collect their logs in a thread-local StringBuilder. This ensures that logs are kept separate for each API request.

LoggingAspect.java

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class LoggingAspect {

    private static final Logger logger = LoggerFactory.getLogger(LoggingAspect.class);
    private static final ThreadLocal<StringBuilder> apiLog = ThreadLocal.withInitial(StringBuilder::new);

    @Pointcut("within(@org.springframework.web.bind.annotation.RestController *)")
    public void controllerMethods() {}

    @Pointcut("within(@org.springframework.stereotype.Service *)")
    public void serviceMethods() {}

    @Before("controllerMethods() || serviceMethods()")
    public void logBeforeMethod(JoinPoint joinPoint) {
        StringBuilder logBuilder = apiLog.get();
        logBuilder.append(joinPoint.getSignature().getDeclaringTypeName()).append(".")
                  .append(joinPoint.getSignature().getName()).append(" | ")
                  .append("Request: ").append(Arrays.toString(joinPoint.getArgs())).append(" | ");
    }

    @AfterReturning(pointcut = "controllerMethods() || serviceMethods()", returning = "result")
    public void logAfterMethod(JoinPoint joinPoint, Object result) {
        StringBuilder logBuilder = apiLog.get();
        logBuilder.append("Response: ").append(result).append(" | ");
    }

    @AfterReturning("controllerMethods()")
    public void logApiRequest() {
        String logEntry = apiLog.get().toString();
        logger.info(logEntry);
        apiLog.remove();  // Clean up the ThreadLocal to avoid memory leaks
    }
}

2. Logback Configuration

To ensure that the logs are formatted correctly and captured efficiently, you can configure Logback as follows:

logback.xml

<configuration>
    <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} | %msg%n"/>
    
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/application.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logs/application-%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <logger name="com.yourcompany.yourapp" level="INFO">
        <appender-ref ref="FILE"/>
        <appender-ref ref="CONSOLE"/>
    </logger>

    <root level="INFO">
        <appender-ref ref="FILE"/>
        <appender-ref ref="CONSOLE"/>
    </root>
</configuration>

3. Explanation

	•	ThreadLocal Logging: The ThreadLocal<StringBuilder> ensures that logs from different threads (i.e., different API requests) do not get mixed up. Each request has its own isolated log storage.
	•	@Before: This annotation logs the method name and request data before the method is executed.
	•	@AfterReturning: This annotation logs the response after the method execution. The final method logs the entire request and response once the controller method has finished processing.
	•	Single Line Logs: The StringBuilder is used to concatenate all method logs within a single API request. The final log is output as a single line after the controller method has completed execution.

4. Usage

You can include this aspect in your Spring Boot application by simply adding it to your project. The aspect will automatically intercept all methods annotated with @RestController or within a @Service, logging their input and output in a single line once the API request is complete.

This approach provides a clean and efficient way to track the flow of data through your API, making it easier to debug and understand how different methods interact within each request.
